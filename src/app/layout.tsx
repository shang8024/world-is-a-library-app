import type { Metadata, Viewport } from "next"
import { cookies } from "next/headers"
import { fontVariables } from "@/lib/fonts"
import { ThemeProvider } from "@/components/theme/ThemeProvider"
import "./globals.css"
import { cn } from "@/lib/utils"
import { ActiveThemeProvider } from "@/components/theme/ActiveTheme"
import { Footer } from "@/components/Footer";
import { Suspense } from "react"
import { Toaster } from "@/components/ui/sonner"
import { NavHeader } from "@/components/NavHeader"
import { ModeSwitcher } from "@/components/theme/ModeSwitcher"
import Loading from "@/components/Loading"
import { auth } from "@/lib/auth/auth"
import { headers } from "next/headers"
import MobileBottomNavbar from "@/components/navigation/MobileBottomNavbar"

const META_THEME_COLORS = {
  light: "#ffffff",
  dark: "#09090b",
}
export const metadata: Metadata = {
  title: "World Is a Library",
  description: "Generated by create next app",
};


export const viewport: Viewport = {
  themeColor: META_THEME_COLORS.light,
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const cookieStore = await cookies()
  const activeThemeValue = cookieStore.get("active_theme")?.value
  const isScaled = activeThemeValue?.endsWith("-scaled")
  const session= await auth.api.getSession({
    headers: await headers()
  })
  const user = session?.user

  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              try {
                if (localStorage.theme === 'dark' || ((!('theme' in localStorage) || localStorage.theme === 'system') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                  document.querySelector('meta[name="theme-color"]').setAttribute('content', '${META_THEME_COLORS.dark}')
                }
              } catch (_) {}
            `,
          }}
        />
      </head>
      <body
        className={cn(
          "bg-background overscroll-none font-sans antialiased",
          activeThemeValue ? `theme-${activeThemeValue}` : "",
          isScaled ? "theme-scaled" : "",
          fontVariables
        )}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="light"
          enableSystem
          disableTransitionOnChange
          enableColorScheme
        >
          <ActiveThemeProvider initialTheme={activeThemeValue}>
            <Suspense fallback={<Loading />}>
            <main className="min-h-svh flex flex-col">
              <header className="bg-background sticky inset-x-0 top-0 isolate z-10 flex shrink-0 items-center gap-2 border-b">
                <div className="flex h-14 w-full items-center gap-2 px-4">
                  <NavHeader />
                  <div className="ml-auto flex items-center gap-2">
                    <ModeSwitcher />
                  </div>
                </div>
              </header>
              <div className="flex-1 min-h-svh">
                {children}
                {user && <MobileBottomNavbar/>}
              </div>
            </main>
            <Toaster/>
            </Suspense>
            {/* Footer */}
            <Footer />
          </ActiveThemeProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}